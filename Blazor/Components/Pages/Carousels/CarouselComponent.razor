@if (Images != null)
{
    <div class="carousel-container @(isZoomed ? "zoomed" : "")">
        <button class="nav-button prev" @onclick="PreviousImage">❮</button>
        <button class="nav-button next" @onclick="NextImage">❯</button>

        <div class="carousel" @onwheel="OnScroll">
            @for (var i = 0; i < Images.Count; i++)
            {
                var path = Images[i];
                <div class="carousel-item @(currentIndex == i ? "active" : "")"
                     @onclick="ToggleZoom"
                     @onmousemove="OnMouseMove"
                     style="@(isZoomed ? $"transform: scale({currentZoom}) translate({translateX}px, {translateY}px)" : "")">
                    <img src="@path" alt="Image @i" />
                </div>
            }
        </div>

        <div class="carousel-controls">
            <h2 class="carousel-title">@Title</h2>
            <div class="carousel-buttons">
                @if (EnableZoom)
                {
                    <button class="toggle-button" @onclick="ToggleZoom">
                        @(isZoomed ? "Reset Zoom" : "Enable Zoom")
                    </button>
                }
                @if (EnableScrollToggle)
                {
                    <button class="toggle-button" @onclick="ToggleScroll">
                        @(isScrollEnabled ? "Disable Scroll" : "Enable Scroll")
                    </button>
                }
                @if (EnableAutoScroll)
                {
                    <button class="toggle-button" @onclick="ToggleAutoScroll">
                        @(isAutoScrollEnabled ? "Stop Auto Scroll" : "Start Auto Scroll")
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<string> Images { get; set; } = new();

    [Parameter]
    public string Title { get; set; } = "Carousel";

    [Parameter]
    public bool EnableScrollToggle { get; set; }

    [Parameter]
    public bool EnableAutoScroll { get; set; }

    [Parameter]
    public int AutoScrollInterval { get; set; } = 3000;

    [Parameter]
    public bool EnableZoom { get; set; }

    [Parameter]
    public double MaxZoom { get; set; } = 3.0;

    private int currentIndex = 0;
    private bool isScrollEnabled = false;
    private bool isAutoScrollEnabled = false;
    private System.Threading.Timer? autoScrollTimer;

    private bool isZoomed;
    private double currentZoom = 1.0;
    private double translateX;
    private double translateY;
    private double lastMouseX;
    private double lastMouseY;

    protected override void OnInitialized()
    {
        if (EnableAutoScroll)
        {
            autoScrollTimer = new System.Threading.Timer(AutoScroll, null, Timeout.Infinite, AutoScrollInterval);
        }
        if (EnableScrollToggle)
        {
            isScrollEnabled = true;
        }
    }

    private void AutoScroll(object? state)
    {
        if (isAutoScrollEnabled)
        {
            InvokeAsync(() =>
            {
                NextImage();
                StateHasChanged();
            });
        }
    }

    private void ToggleAutoScroll()
    {
        isAutoScrollEnabled = !isAutoScrollEnabled;
        if (isAutoScrollEnabled)
        {
            autoScrollTimer?.Change(0, AutoScrollInterval);
        }
        else
        {
            autoScrollTimer?.Change(Timeout.Infinite, AutoScrollInterval);
        }
    }

    private void NextImage()
    {
        currentIndex = (currentIndex + 1) % Images.Count;
    }

    private void PreviousImage()
    {
        currentIndex = (currentIndex - 1 + Images.Count) % Images.Count;
    }

    private void OnScroll(WheelEventArgs e)
    {
        if (isScrollEnabled)
        {
            if (e.DeltaY > 0)
            {
                NextImage();
            }
            else
            {
                PreviousImage();
            }
        }
    }

    private void ToggleScroll()
    {
        isScrollEnabled = !isScrollEnabled;
    }

    private void ToggleZoom()
    {
        if (EnableZoom)
        {
            isZoomed = !isZoomed;
            if (isZoomed)
            {
                currentZoom = MaxZoom;
            }
            else
            {
                ResetZoom();
            }
        }
    }

    private void ResetZoom()
    {
        isZoomed = false;
        currentZoom = 1.0;
        translateX = 0;
        translateY = 0;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (isZoomed)
        {
            if (e.Buttons == 1) // Left mouse button
            {
                double deltaX = e.ClientX - lastMouseX;
                double deltaY = e.ClientY - lastMouseY;
                
                translateX += deltaX;
                translateY += deltaY;

                // Begræns pan området
                double maxTranslate = 100 * (currentZoom - 1);
                translateX = Math.Clamp(translateX, -maxTranslate, maxTranslate);
                translateY = Math.Clamp(translateY, -maxTranslate, maxTranslate);
            }
            lastMouseX = e.ClientX;
            lastMouseY = e.ClientY;
        }
    }

    protected override void OnParametersSet()
    {
        if (!EnableZoom)
        {
            ResetZoom();
        }
    }

    public void Dispose()
    {
        autoScrollTimer?.Dispose();
    }
}
