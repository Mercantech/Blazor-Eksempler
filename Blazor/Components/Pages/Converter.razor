@page "/Converter"
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<div class="container mt-4">
    <h3>Connection String Converter</h3>
    <p class="text-muted">Konverter mellem Neon.tech PostgreSQL og .NET format</p>

    <div class="btn-group mb-4" role="group">
        <input type="radio" class="btn-check" name="conversionType" id="neonToNet" value="neonToNet" 
               @onclick="() => CurrentConversion = ConversionType.NeonToNet" checked>
        <label class="btn btn-outline-primary" for="neonToNet">Neon → .NET</label>

        <input type="radio" class="btn-check" name="conversionType" id="netToNeon" value="netToNeon" 
               @onclick="() => CurrentConversion = ConversionType.NetToNeon">
        <label class="btn btn-outline-primary" for="netToNeon">.NET → Neon</label>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="form-group">
                <label for="inputString">@(CurrentConversion == ConversionType.NeonToNet ? "Neon.tech Connection String" : ".NET Connection String eller JSON")</label>
                <textarea class="form-control" id="inputString" @bind="InputString" rows="5"
                         placeholder="@(CurrentConversion == ConversionType.NeonToNet ? 
                         "postgresql://user:password@host/database?sslmode=require" : 
                         "Host=host;Username=user;Password=password;Database=database;sslmode=require;")"></textarea>
            </div>
            
            <button class="btn btn-primary mt-3" @onclick="ConvertConnectionString">Konverter</button>
            
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @ErrorMessage
                </div>
            }
            
            @if (!string.IsNullOrEmpty(Result))
            {
                <div class="mt-4">
                    <h4>Konverteret Connection String:</h4>
                    <div class="form-group">
                        <div class="input-group">
                            <input type="text" class="form-control" readonly value="@Result">
                            <button class="btn btn-outline-secondary" @onclick="CopyToClipboard">
                                <span class="bi bi-clipboard"></span> Kopiér
                            </button>
                        </div>
                    </div>
                    
                    @if (CurrentConversion == ConversionType.NeonToNet)
                    {
                        <div class="mt-3">
                            <h5>JSON Format:</h5>
                            <pre class="bg-light p-3 rounded"><code>{
    "ConnectionStrings": {
        "DefaultConnection": "@Result"
    }
}</code></pre>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private enum ConversionType
    {
        NeonToNet,
        NetToNeon
    }

    private ConversionType CurrentConversion { get; set; } = ConversionType.NeonToNet;
    private string InputString { get; set; } = "";
    private string Result { get; set; } = "";
    private string ErrorMessage { get; set; } = "";

    private void ConvertConnectionString()
    {
        try
        {
            ErrorMessage = "";
            
            if (string.IsNullOrWhiteSpace(InputString))
            {
                ErrorMessage = "Indtast venligst en connection string";
                return;
            }

            if (CurrentConversion == ConversionType.NeonToNet)
            {
                ConvertNeonToNet();
            }
            else
            {
                ConvertNetToNeon();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ugyldig connection string format. Kontroller venligst input.";
            Result = "";
        }
    }

    private void ConvertNeonToNet()
    {
        Uri uri = new Uri(InputString);
        string[] userInfo = uri.UserInfo.Split(':');
        string username = userInfo[0];
        string password = userInfo[1];
        string host = uri.Host;
        string database = uri.LocalPath.TrimStart('/');

        Result = $"Host={host};Username={username};Password={password};Database={database};sslmode=require;";
    }

    private void ConvertNetToNeon()
    {
        // Fjern eventuelle JSON-formateringer
        string connectionString = InputString;
        if (InputString.Contains("DefaultConnection"))
        {
            // Simpel JSON parsing - kan gøres mere robust med System.Text.Json
            connectionString = InputString
                .Split("DefaultConnection\":", StringSplitOptions.RemoveEmptyEntries)[1]
                .Split('"')[1];
        }

        var parts = connectionString.Split(';')
            .Where(p => !string.IsNullOrWhiteSpace(p))
            .Select(p => p.Trim())
            .ToDictionary(
                p => p.Split('=')[0].ToLower(),
                p => p.Split('=')[1]
            );

        if (!parts.ContainsKey("host") || !parts.ContainsKey("username") || 
            !parts.ContainsKey("password") || !parts.ContainsKey("database"))
        {
            throw new Exception("Manglende påkrævede connection string parametre");
        }

        Result = $"postgresql://{parts["username"]}:{parts["password"]}@{parts["host"]}/{parts["database"]}?sslmode=require";
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Result);
    }
}
