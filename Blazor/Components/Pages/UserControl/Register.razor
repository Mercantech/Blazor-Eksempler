@page "/register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-card">
        <h3 class="text-center mb-4">Opret Konto</h3>

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText type="password" id="password" @bind-Value="registerModel.Password" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Bekræft Password:</label>
                <InputText type="password" id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-primary">Opret Konto</button>
            <a href="/login" class="btn btn-link">Har du allerede en konto? Log ind her</a>
        </EditForm>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords matcher ikke";
            return;
        }

        var user = new IdentityUser { UserName = registerModel.Email, Email = registerModel.Email };
        var result = await UserManager.CreateAsync(user, registerModel.Password);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email er påkrævet")]
        [EmailAddress(ErrorMessage = "Ugyldig email adresse")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password er påkrævet")]
        [StringLength(100, ErrorMessage = "Password skal være mindst {2} tegn langt.", MinimumLength = 6)]
        public string Password { get; set; } = "";

        [Compare("Password", ErrorMessage = "Passwords matcher ikke")]
        public string ConfirmPassword { get; set; } = "";
    }
}

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .auth-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 400px;
        animation: slideIn 0.5s ease-out;
    }

    .form-group {
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
    }

    .form-group:nth-child(1) {
        animation-delay: 0.2s;
    }

    .form-group:nth-child(2) {
        animation-delay: 0.4s;
    }

    .form-group:nth-child(3) {
        animation-delay: 0.6s;
    }

    .form-control {
        border-radius: 8px;
        padding: 0.75rem;
        border: 2px solid #e1e1e1;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #000DFF;
        box-shadow: 0 0 0 0.2rem rgba(0, 13, 255, 0.25);
    }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        border-radius: 8px;
        background: #000DFF;
        border: none;
        font-weight: 600;
        transition: all 0.3s ease;
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
        animation-delay: 0.8s;
    }

    .btn-primary:hover {
        background: #0000CC;
        transform: translateY(-2px);
    }

    .auth-link {
        color: #000DFF;
        text-decoration: none;
        font-weight: 500;
    }

    .auth-link:hover {
        text-decoration: underline;
    }

    @@keyframes slideIn {
        from {
            transform: translateY(20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>