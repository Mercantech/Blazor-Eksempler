@page "/login"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-card">
        <h3 class="text-center mb-4">Log ind</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <button type="submit" class="btn btn-primary">Log ind</button>
        </EditForm>

        <div class="mt-3 text-center">
            <a href="/register" class="auth-link">Ny bruger? Opret konto her</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            await Task.Delay(1000);
            
            var user = await UserManager.FindByEmailAsync(loginModel.Email);
            if (user == null)
            {
                errorMessage = "Ugyldig email eller password";
                return;
            }

            var result = await SignInManager.CheckPasswordSignInAsync(user, loginModel.Password, false);

            if (result.Succeeded)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = "Ugyldig email eller password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Der opstod en fejl under login. Prøv igen senere.";
            Console.WriteLine($"Login error: {ex}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email er påkrævet")]
        [EmailAddress(ErrorMessage = "Ugyldig email adresse")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password er påkrævet")]
        public string Password { get; set; } = "";
    }
}

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .auth-card {
        background: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 400px;
        animation: slideIn 0.5s ease-out;
    }

    .form-group {
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
    }

    .form-group:nth-child(1) {
        animation-delay: 0.2s;
    }

    .form-group:nth-child(2) {
        animation-delay: 0.4s;
    }

    .btn-primary {
        opacity: 0;
        animation: fadeIn 0.5s ease-out forwards;
        animation-delay: 0.6s;
        width: 100%;
        padding: 0.75rem;
        border-radius: 8px;
        background: #000DFF;
        border: none;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: #0000CC;
        transform: translateY(-2px);
    }

    .auth-link {
        color: #000DFF;
        text-decoration: none;
        font-weight: 500;
    }

    .auth-link:hover {
        text-decoration: underline;
    }

    @@keyframes slideIn {
        from {
            transform: translateY(20px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .btn-primary.loading {
        position: relative;
        color: transparent;
    }

    .btn-primary.loading::after {
        content: "";
        position: absolute;
        left: 50%;
        top: 50%;
        width: 20px;
        height: 20px;
        border: 2px solid #fff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 0.8s linear infinite;
        transform: translate(-50%, -50%);
    }

    @@keyframes spin {
        to {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    }
</style>