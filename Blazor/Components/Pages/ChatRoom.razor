@page "/chatroom"
@using Blazor.Data
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext

<div class="chat-container">
    <div class="chat-header">
        <h4>Velkommen, @currentUser!</h4>
    </div>
    <div class="chat-content">
        <div class="chat-messages" @ref="chatMessagesRef">
            <ul>
                @foreach (var message in messages)
                {
                    <li class="@(message.StartsWith(currentUser) ? "sent" : "received")">
                        <div class="message">@message</div>
                    </li>
                }
                @if (!string.IsNullOrEmpty(typingUser))
                {
                    <li class="typing received">
                        <div class="message">@typingUser skriver...</div>
                    </li>
                }
            </ul>
        </div>
    </div>
    <div class="chat-input">
        <input @bind="messageInput" @bind:event="oninput" @onkeyup="HandleInput" placeholder="Skriv en besked..." />
        <button @onclick="Send">Send</button>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string messageInput;
    private string currentUser;
    private string typingUser;
    private System.Timers.Timer typingTimer;
    private List<string> activeUsers = new List<string>();
    private ElementReference chatMessagesRef;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", async (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserTyping", async (user) =>
        {
            typingUser = user;
            await InvokeAsync(StateHasChanged);

            // Reset the typing timer
            typingTimer?.Dispose();
            typingTimer = new System.Timers.Timer(1000);
            typingTimer.Elapsed += async (sender, e) =>
            {
                typingUser = null;
                await InvokeAsync(StateHasChanged);
            };
            typingTimer.AutoReset = false;
            typingTimer.Start();
        });

        hubConnection.On<string>("UserConnected", async (user) =>
        {
            activeUsers.Add(user);
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserDisconnected", async (user) =>
        {
            activeUsers.Remove(user);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

        currentUser = await hubConnection.InvokeAsync<string>("GetUniqueUserName");

        var recentMessages = await DbContext.ChatMessages
            .OrderByDescending(m => m.CreatedAt)
            .Take(10)
            .ToListAsync();

        messages = recentMessages.Select(m => $"{m.User}: {m.Message}").Reverse().ToList();
    }

    private async Task Send()
    {
        await hubConnection.SendAsync("SendMessage", currentUser, messageInput);
        messageInput = "";
    }

    private async Task HandleInput()
    {
        await hubConnection.SendAsync("Typing", currentUser);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        typingTimer?.Dispose();
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
    }

    .chat-header {
        padding: 20px;
        background-color: #007bff;
        color: white;
        text-align: center;
    }

    .chat-header h4 {
        margin: 0;
        font-size: 1.5rem;
    }

    .chat-content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 20px;
    }

    .chat-messages ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .chat-messages li {
        margin-bottom: 10px;
        display: flex;
    }

    .sent {
        justify-content: flex-end;
    }

    .received {
        justify-content: flex-start;
    }

    .message {
        padding: 10px;
        border-radius: 10px;
        max-width: 80%;
    }

    .sent .message {
        background-color: #007bff;
        color: white;
    }

    .received .message {
        background-color: #f1f1f1;
        color: black;
    }

    .typing .message {
        font-style: italic;
    }

    .chat-input {
        padding: 20px;
        background-color: #f8f9fa;
        border-top: 1px solid #dee2e6;
        display: flex;
        align-items: center;
    }

    .chat-input input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 5px;
        margin-right: 10px;
    }

    .chat-input button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .chat-input button:hover {
        background-color: #0056b3;
    }
</style>