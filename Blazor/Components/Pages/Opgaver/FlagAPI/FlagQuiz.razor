@page "/opgaver/flag"
@inject HttpClient Http

<PageTitle>Flag Quiz Game</PageTitle>

<h3 class="game-title">Flag Quiz Game</h3>

@if (loading)
{
    <p>Loading...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-message">
        <p>@errorMessage</p>
        <button @onclick="RetryLoading" class="submit-button">Prøv igen</button>
    </div>
}
else
{
    <div class="game-wrapper">
        <div class="game-container">
            <img class="country-flag" src="@currentFlag" alt="Guess the country"/>
            @if (!gameOver)
            {
                <div class="guess-section">
                    <p>Hvilket land tilhører dette flag?</p>
                    <div class="options-grid">
                        @foreach (var option in options)
                        {
                            <button 
                                @onclick="() => CheckAnswer(option.cca3)" 
                                class="option-button">
                                @option.name.common
                            </button>
                        }
                    </div>
                </div>
            }
            else
            {
                <p> Correct Answer: @options.FirstOrDefault(c => c.flags.png == currentFlag)?.name.common</p>
                <div class="game-over-container">
                    <h4>Game Over</h4>
                    <p>Your Score: @score</p>
                    <button @onclick="RestartGame" class="submit-button">Play Again</button>
                </div>
            }
        </div>
        <div class="score-container">
            <h4>Score</h4>
            <p>Current Score: @score</p>
            <p>High Score: @highScore</p>
        </div>
    </div>

}

@code {
    private List<Country> countries = new List<Country>();
    private List<Country> options = new List<Country>();
    private string currentFlag;
    private int score;
    private int highScore;
    private bool loading = true;
    private bool gameOver = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!loading) return;

        try 
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10)); 
            var response = await Http.GetFromJsonAsync<List<Country>>(
                "https://opgaver.mercantec.tech/api/countries",
                cts.Token
            );
            
            if (response != null && response.Any())
            {
                Console.WriteLine("Using OpgaverAPI");
                countries = response.ToList();
                StartNewRound();
                loading = false;
                return;
            }
            
            response = await Http.GetFromJsonAsync<List<Country>>(
                "https://restcountries.com/v3.1/all?fields=flags,name,cca3",
                cts.Token
            );
            if (response != null)
            {
                countries = response.ToList();
                StartNewRound();
            }
            else 
            {
                errorMessage = "Kunne ikke hente landedata";
            }
        }
        catch (OperationCanceledException)
        {
            errorMessage = "Forbindelsen til API'et tog for lang tid. Prøv igen.";
        }
        catch (Exception ex)
        {
            errorMessage = "Der opstod en fejl: " + ex.Message;
            Console.WriteLine($"API Error: {ex}");
        }
        finally 
        {
            loading = false;
        }
    }

    private void StartNewRound()
    {
        var random = new Random();
        options.Clear();
        while (options.Count < 4)
        {
            var country = countries[random.Next(countries.Count)];
            if (!options.Contains(country))
            {
                options.Add(country);
            }
        }
        currentFlag = options[random.Next(options.Count)].flags.png;
    }

    private void CheckAnswer(string answer)
    {
        var correctCountry = options.FirstOrDefault(c => c.flags.png == currentFlag);
        if (correctCountry != null && answer.Equals(correctCountry.cca3, StringComparison.OrdinalIgnoreCase))
        {
            score++;
            if (score > highScore)
            {
                highScore = score;
            }
            if (score >= 10)
            {
                gameOver = true;
            }
            else
            {
                StartNewRound();
            }
        }
        else
        {
            gameOver = true;
        }
    }

    private void RestartGame()
    {
        score = 0;
        gameOver = false;
        StartNewRound();
    }

    private async Task RetryLoading()
    {
        errorMessage = null;
        loading = true;
        await OnInitializedAsync();
    }

    public class Country
    {
        public Flags flags { get; set; }
        public Name name { get; set; }
        public string cca3 { get; set; }
    }

    public class Flags
    {
        public string png { get; set; }
        public string svg { get; set; }
        public string alt { get; set; }
    }

    public class Name
    {
        public string common { get; set; }
        public string official { get; set; }
    }
}

<style>
    .game-wrapper {
        display: flex;
        justify-content: space-around;
        align-items: flex-start;
        max-width: 800px;
        margin: 0 auto;
    }

    .game-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        max-width: 500px;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        animation: fadeIn 0.5s ease-in;
    }

    .score-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f1f1f1;
    }

    .game-title {
        font-size: 2em;
        margin-bottom: 20px;
    }

    .country-flag {
        width: 300px;
        height: 200px;
        object-fit: contain;
        background-color: #f0f0f0;
        margin-bottom: 20px;
        transition: transform 0.3s ease;
    }

    .country-flag:hover {
        transform: scale(1.1);
    }

    .guess-section {
        margin-bottom: 20px;
    }

    .submit-button {
        padding: 10px 20px;
        font-size: 1em;
        cursor: pointer;
        transition: background-color 0.3s ease;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
    }

    .submit-button:hover {
        background-color: #45a049;
    }

    .game-over-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
        margin-top: 20px;
    }

    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@media (max-width: 768px) {
        .game-wrapper {
            flex-direction: column;
            align-items: center;
        }
        
        .game-container,
        .score-container {
            width: 90%;
            margin: 10px 0;
        }
    }

    .error-message {
        text-align: center;
        padding: 20px;
        background-color: #ffebee;
        border: 1px solid #ffcdd2;
        border-radius: 5px;
        margin: 20px auto;
        max-width: 500px;
    }

    .options-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 10px;
        margin-top: 20px;
    }

    .option-button {
        padding: 15px;
        font-size: 1em;
        cursor: pointer;
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .option-button:hover {
        background-color: #e9ecef;
        transform: translateY(-2px);
    }
</style>
